#!/usr/bin/env python3
import gettext
import subprocess
import dbus
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Budgie', '1.0')
from gi.repository import Budgie, Gdk, Gio, GLib, GObject, Gtk

# Get the schema
POWER_SCHEME = "org.gnome.settings-daemon.plugins.power"
SESSION_SCHEME = "org.gnome.desktop.session"


class BudgieCaffeine(GObject.Object, Budgie.Plugin):
    """BudgieCaffeine is top-level object to initialize the applet
    """
    __gtype_name__ = "@PROJECT_NAME@"

    def __init__(self):
        GObject.Object.__init__(self)
        loc = gettext.translation("@PROJECT_NAME@", fallback=True)
        loc.install("@PROJECT_NAME@")

    def do_get_panel_widget(self, uuid):
        """Show the Applet"""
        return CaffeineApplet(uuid)


class CaffeineSettings(Gtk.Grid):
    def __init__(self, setting):
        super().__init__(row_spacing=8, column_spacing=6)
        self.setting = setting

        notify_label = Gtk.Label(_("Enable Notification"), halign=Gtk.Align.START)
        self.add(notify_label)
        notify_switch = Gtk.Switch(halign=Gtk.Align.END, hexpand=True)
        self.attach_next_to(notify_switch, notify_label, Gtk.PositionType.RIGHT, 1, 1)
        
        brightness_label = Gtk.Label(_("Maximize Brightness"), halign=Gtk.Align.START)
        self.attach(brightness_label, 0, 1, 1, 1)
        brightness_switch = Gtk.Switch(halign=Gtk.Align.END, hexpand=True)
        self.attach_next_to(brightness_switch, brightness_label, Gtk.PositionType.RIGHT, 1, 1)
        
        level_label = Gtk.Label(_("Brightness Level"), halign=Gtk.Align.START)
        self.attach(level_label, 0, 2, 1, 1)
        brightness_level = Gtk.SpinButton.new_with_range(0.0, 100.0, 1.0)
        brightness_level.set_value(95.0)
        self.attach_next_to(brightness_level, level_label, Gtk.PositionType.RIGHT, 1, 1)

        # Bind settings to widget value
        setting.bind("enable-notification", notify_switch, "active",
            Gio.SettingsBindFlags.DEFAULT)
        setting.bind("maximize-brightness", brightness_switch, "active",
            Gio.SettingsBindFlags.DEFAULT)
        setting.bind("screen-brightness", brightness_level, "value",
            Gio.SettingsBindFlags.DEFAULT)
        
        self.show_all()
        

class CaffeineApplet(Budgie.Applet):
    def __init__(self, uuid):
        # You can't use shorthand super().__init__() to initialize the Applet
        Budgie.Applet.__init__(self)
        self.uuid = uuid
        self.manager = None
        self.defaults = {}

        # Ensure schema and prefix is set properly
        self.set_settings_prefix("/com/github/yursan9/budgie-caffeine-applet")
        self.set_settings_schema("com.github.yursan9.budgie-caffeine-applet")
        self.settings = self.get_applet_settings(self.uuid)

        # Controlled settings
        bus = dbus.SessionBus()
        proxy = bus.get_object("org.gnome.SettingsDaemon.Power",
                               "/org/gnome/SettingsDaemon/Power")
        self.screen_settings = dbus.Interface(proxy, "org.freedesktop.DBus.Properties")
        self.power_settings = Gio.Settings(POWER_SCHEME)
        self.session_settings = Gio.Settings(SESSION_SCHEME)
        self.fetch_default()

        # Button Trigger
        self.box = Gtk.EventBox()
        self.icon = Gtk.Image.new_from_icon_name("caffeine-cup-empty",
            Gtk.IconSize.BUTTON)
        self.box.add(self.icon)
        self.add(self.box)

        # Popover
        self.popover = Budgie.Popover.new(self.box)
        self.popover.get_style_context().add_class("caffeine-popover")
        layout = Gtk.Grid(row_spacing=8, column_spacing=6)
        layout.set_border_width(10)

        label = Gtk.Label(_("Caffeine Mode"), halign=Gtk.Align.START)
        layout.add(label)
        self.switch = Gtk.Switch(halign=Gtk.Align.END, hexpand=True)
        layout.attach_next_to(self.switch, label, Gtk.PositionType.RIGHT, 1, 1)

        sep = Gtk.Separator()
        layout.attach(sep, 0, 1, 2, 1)

        label = Gtk.Label(_("Timer (minutes)"), halign=Gtk.Align.START)
        layout.attach(label, 0, 2, 1, 1)
        self.timer = Gtk.SpinButton.new_with_range(0.0, 1440.0, 1.0)
        layout.attach_next_to(self.timer, label, Gtk.PositionType.RIGHT, 1, 1)
        self.popover.add(layout)

        self.popover.get_child().show_all()
        self.box.show_all()
        self.show_all()

        # Connect Callback
        self.switch.connect("notify::active", self._on_caffeine_on)
        self.box.connect("button-press-event", self._on_press)

    def do_get_settings_ui(self):
        """Return the applet settings with given uuid"""
        return CaffeineSettings(self.get_applet_settings(self.uuid))

    def do_supports_settings(self):
        """Return True if support setting through Budgie Setting,
        False otherwise.
        """
        return True

    def do_update_popovers(self, manager):
        """Register popover to manager"""
        manager.register_popover(self.box, self.popover)
        self.manager = manager

    def send_notification(self, activate, time, auto=None):
        """Send Notification using notify-send binary.

        NOTE: Budgie is panicking if you tried using built-in Notify library.
        """
        cmd = ["notify-send"]

        if activate:
            cmd.append(_("Turn on Caffeine Boost"))
            if time:
                duration = _("{time} minutes").format(time=time) if time > 1 else _("a minute")
                cmd.append(_("Will turn off in {duration}").format(duration=duration))
            if auto:
                cmd.append(_("{app} automatically turn on Caffeine Mode").format(app=auto))
            cmd.append("--icon=caffeine-cup-full")
        else:
            cmd.append(_("Turn off Caffeine Boost"))
            cmd.append("--icon=caffeine-cup-empty")
        # Trigger the notification
        subprocess.Popen(cmd)

    def fetch_default(self):
        """Fetch default configuration

        Store the configuration to defaults
        """
        self.defaults = {
            "idle-delay": self.session_settings.get_uint("idle-delay"),
            "idle-dim": self.power_settings.get_boolean("idle-dim"),
            "sleep-inactive-ac-type": self.power_settings.get_string(
                "sleep-inactive-ac-type"),
            "sleep-inactive-battery-type": self.power_settings.get_string(
                "sleep-inactive-battery-type"),
            "screen-brightness": self.screen_settings.Get(
                "org.gnome.SettingsDaemon.Power.Screen", "Brightness"),
        }

    def change_screen_brightness(self, activate, value):
        """Change screen brightness to value in Gio.Setting

        Variable activate acts as toogle, and variable value provides for
        default brightness value
        """
        try:
            if activate:
                self.screen_settings.Set('org.gnome.SettingsDaemon.Power.Screen',
                                         'Brightness',
                                         self.settings.get_uint("screen-brightness"))
            else:
                self.screen_settings.Set('org.gnome.SettingsDaemon.Power.Screen',
                                         'Brightness', value)
        except dbus.exceptions.DBusException:
            pass

    def timer_out(self, time):
        """Reset Caffeine mode and timer value"""
        self.switch.set_active(False)
        self.timer.set_value(0)
        return False

    def _on_caffeine_on(self, switch, params):
        self.box.remove(self.icon)

        time = self.timer.get_value_as_int()
        if switch.get_active():
            # Fetch power settings default value
            self.fetch_default()
            self.timer.set_sensitive(False)
            self.session_settings.set_uint("idle-delay", 0)
            self.power_settings.set_boolean("idle-dim", False)
            self.power_settings.set_string("sleep-inactive-ac-type",
                                           "nothing")
            self.power_settings.set_string("sleep-inactive-battery-type",
                                           "nothing")

            self.icon = Gtk.Image.new_from_icon_name("caffeine-cup-full",
                Gtk.IconSize.BUTTON)
            self.box.add(self.icon)

            # Add timeout callback if time is not 0
            if time:
                GLib.timeout_add_seconds(time * 60, self.timer_out,
                                         GLib.PRIORITY_DEFAULT)
        else:
            self.timer.set_sensitive(True)
            self.session_settings.set_uint("idle-delay",
                    self.defaults.get("idle-delay"))
            self.power_settings.set_boolean("idle-dim",
                    self.defaults.get("idle-dim"))
            self.power_settings.set_string("sleep-inactive-ac-type",
                    self.defaults.get("sleep-inactive-ac-type"))
            self.power_settings.set_string("sleep-inactive-battery-type",
                    self.defaults.get("sleep-inactive-battery-type"))

            self.icon = Gtk.Image.new_from_icon_name("caffeine-cup-empty",
                Gtk.IconSize.BUTTON)
            self.box.add(self.icon)

        # Change screen brightness if enabled
        if self.settings.get_boolean("maximize-brightness"):
            self.change_screen_brightness(switch.get_active(),
                                          self.defaults.get("screen-brightness"))

        # Send notification if enabled
        if self.settings.get_boolean("enable-notification"):
            self.send_notification(switch.get_active(), time)
            
        self.box.show_all()

    def	_on_press(self, box, e):
        # Stop if not left or middle click button
        if e.button not in [1, 2]:
            return Gdk.EVENT_PROPAGATE

        # If middle button clicked toogle the caffeine mode
        if e.button == 2:
            if self.switch.get_active():
                self.switch.set_active(False)
            else:
                self.switch.set_active(True)
            return Gdk.EVENT_STOP

        # Popover show and hide
        if self.popover.get_visible():
            self.popover.hide()
        else:
            self.manager.show_popover(self.box)
        return Gdk.EVENT_STOP
